dist: focal
language: c++
sudo: true
matrix:
  include:
    - os: linux
      compiler: clang
      env:
        - CONAN_ARGS="-s arch=x86_64 -s build_type=Release -s compiler=clang -s compiler.libcxx=libstdc++11 -s compiler.version=11 --build"
        - CXX=clang++-11
        - CC=clang-11
        - CMAKE_CXX_FLAGS="-Wall -pedantic -pthread -g -O0 -fprofile-arcs -ftest-coverage"
        - CMAKE_EXE_LINKER_FLAGS="--coverage"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - clang-tools-11
            - clang-11
            - cmake
            - lcov
            - libjsoncpp-dev
            - libboost1.71-all-dev
            - libgtest-dev
    - os: linux
      compiler: gcc
      env:
        - CONAN_ARGS="-s arch=x86_64 -s build_type=Release -s compiler=gcc -s compiler.libcxx=libstdc++11 -s compiler.version=10 --build"
        - CXX=g++-10
        - CC=gcc-10
        - CMAKE_CXX_FLAGS="-Wall -pedantic -pthread -g -O0 -fprofile-arcs -ftest-coverage"
        - CMAKE_EXE_LINKER_FLAGS="-coverage -lgcov"
      addons:
        apt:
          update: true
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-10
            - cmake
            - lcov
            - libjsoncpp-dev
            - libboost1.71-all-dev
            - libgtest-dev

install:
  - "[ $CXX = g++ ] && export CXX=g++-10 || true"
  - "[ $CXX = clang++ ] && export CXX=clang++-11 || true"

before_script:
  - sudo pip install conan

script:
  - |
    mkdir build
    cd build
    cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" ..
    make -j
    make test ARGS="-j -V"

after_success:
  - |
    if [ "$CXX" = "g++-10" ]; then
      cd ${TRAVIS_BUILD_DIR}
      lcov --directory . --capture --output-file coverage.info # capture coverage info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
      lcov --list coverage.info #debug info
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    fi
