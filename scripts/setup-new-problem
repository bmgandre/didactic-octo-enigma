#!/bin/bash

function usage_msg {
	echo "Usage: $0 {option}"
	echo
	echo "option:"
	echo "   -n|--name    The name of the problem"
	echo "                You can use namespace format here"
	echo "   -h|--help    Print help message"
}

function error_arg {
	usage_msg
	exit 1
}

function set_name {
	[[ ! "$1" =~ ^\- ]] && export problem_ns="$1"
}

function create_source_dir {
	# create src dir
	src_dir="src/${problem_ns//::/\/}"
	mkdir -p "${src_dir}"
}

function write_cmake_hlp_file {
	local p_ns=${problem_ns%::*}
	(
	for ns in ${p_ns//::/ }
	do
		cd $ns
		if [ ! -e CMakeLists.txt ]; then
		cat << EOF_CMAKELISTS > CMakeLists.txt
project_add_all_folders()
EOF_CMAKELISTS
		fi
	done
	)
}

function write_cmake_prj_file {
	if [ -e CMakeLists.txt ]; then
		return 1;
	fi

	cat << EOF_CMAKELISTS > CMakeLists.txt
hackerrank_challenge_solution(${problem_name}.cpp ${problem_name}.h)
hackerrank_challenge_test(${problem_name}_test.cpp)
EOF_CMAKELISTS
}

function write_header_file {
	local header_file="${problem_name}.h"
	if [ -e $header_file ]; then
		return 1;
	fi

	local p_ns=${problem_ns%::*}
	local ns_begin=
	local ns_end=
	for ns in ${p_ns//::/ }
	do
		ns_begin="$ns_begin\nnamespace $ns {"
	done

	for ns in $(echo ${p_ns//::/ } | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }' )
	do
		ns_end="${ns_end}\n} // namespace $ns"
	done

	echo -ne "#pragma once

namespace hackerrank {
namespace bmgandre {${ns_begin}

class ${problem_name}
{
public:
	static void solve();
};
${ns_end}
} // namespace bmgandre
} // namespace hackerrank
" > $header_file
}

function write_source_file {
	local source_file="${problem_name}.cpp"
	if [ -e $source_file ]; then
		return 1;
	fi

	echo -ne "#include \"${problem_name}.h\"
#include <iostream>
#include <string>

using hackerrank::bmgandre::${problem_ns};

void ${problem_name}::solve()
{
}
" > $source_file
}

function write_test_file {
	local test_file="${problem_name}_test.cpp"
	if [ -e $test_file ]; then
		return 1;
	fi

	local p_ns=${problem_ns%::*}
	local ns_begin=
	local ns_end=
	for ns in ${p_ns//::/ }
	do
		ns_begin="$ns_begin\nnamespace $ns {"
	done

	for ns in $(echo ${p_ns//::/ } | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }' )
	do
		ns_end="${ns_end}\n} // namespace $ns"
	done

	echo -ne "#include <hackerrank_gtest.h>
#include \"${problem_name}.h\"

namespace hackerrank {
namespace bmgandre {${ns_begin}

using ${problem_name}_test = hackerrank::bmgandre::tests::hackerrank_gtest;

TEST_F(${problem_name}_test, test_case_1) {
	input_stream << \"TEST INPUT\";
	${problem_name}::solve();

	std::string output = output_stream.str();
	ASSERT_EQ(output, \"TEST OUTPUT\");
}
${ns_end}
} // namespace bmgandre
} // namespace hackerrank

int main(int argc, char** argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
" > $test_file
}

if [ ! -d "src" ] || [ ! -f CMakeLists.txt ]; then
	echo "Error: You must run this script in root project directory"
	usage_msg
	exit 2
fi

if ! grep -iq "^project(" CMakeLists.txt; then
	echo "Error: You must run this script in root project directory"
	usage_msg
	exit 2
fi

if [[ $# < 1 ]]; then
	error_arg
fi

while [[ $# > 0 ]]
do
	key="$1"
	case $key in
		-n|--name)
			set_name "$2"
			[ ! -z "${problem_ns}" ] && shift
		;;
		-h|--help)
			usage_msg
			exit 0
		;;
		*)
			error_arg
		;;
	esac
	shift # past argument or value
done

if [ -z "${problem_ns}"  ]; then
	echo "Error: name is required but missing"
	usage_msg
	exit 2
fi

ns_trim="$(echo -e "${problem_ns}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/[[:space:]]\+//')"
ns_trim="${ns_trim,,}"
if [ "${problem_ns}" != "${ns_trim}" ]; then
	echo "Warn: name will be fixed to: ${ns_trim}"
fi

# lowercase problem namespace without space 
problem_ns="${ns_trim}"
# problem name from namespace
problem_name=${problem_ns##*::}

create_source_dir

(cd "${src_dir}"
  write_cmake_prj_file
  write_header_file
  write_source_file
  write_test_file
) 

(cd "src"
  write_cmake_hlp_file
)

